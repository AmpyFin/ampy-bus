name: ampy-bus CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-and-smoke:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22.x'
          check-latest: true

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.12'

      - name: Go tidy + build all
        run: |
          go mod tidy
          go build ./...
          go build -o ampybusctl   ./cmd/ampybusctl
          go build -o kafkabusctl  ./cmd/kafkabusctl
          go build -o kafkapoison  ./cmd/kafkapoison
          go build -o kafkainspect ./cmd/kafkainspect
          go build -o benchkafka   ./cmd/benchkafka
          go build -o benchnats    ./cmd/benchnats

      - name: Python install (editable) with NATS extra
        run: |
          python -m pip install --upgrade pip
          pip install -e .[nats]

      # ---------- Golden fixtures ----------
      - name: Validate golden fixtures (if present)
        run: |
          ./ampybusctl validate-fixture --dir golden || true

      # ---------- NATS (JetStream) smoke + SLO bench ----------
      - name: Start NATS (JetStream)
        shell: bash
        run: |
          docker run -d --name nats -p 4222:4222 nats:2.10 -js
          
      - name: Wait for NATS
        run: |
          python3 -c "
          import socket
          import time
          import sys
          print('Waiting for NATS to be ready...')
          for i in range(60):
              try:
                  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                  sock.settimeout(1)
                  result = sock.connect_ex(('127.0.0.1', 4222))
                  sock.close()
                  if result == 0:
                      print('NATS port is open, waiting for full readiness...')
                      time.sleep(3)
                      print('NATS is ready')
                      sys.exit(0)
              except Exception as e:
                  print(f'Connection attempt {i+1} failed: {e}')
              time.sleep(1)
          print('NATS failed to start within 60 seconds')
          sys.exit(1)
          "

      - name: NATS publish (ampybusctl)
        run: |
          timeout 30s ./ampybusctl pub-empty \
            --topic ampy.prod.bars.v1.XNAS.AAPL \
            --producer ci@runner --source ci --pk XNAS.AAPL \
            --nats nats://127.0.0.1:4222

      - name: NATS consume once (Python)
        run: |
          timeout 30s python3 python/examples/py_nats_sub.py \
            --subject "ampy.prod.bars.v1.>" \
            --durable "ci-sub" \
            --exit-after 1 --timeout-sec 10 \
            --nats nats://127.0.0.1:4222

      - name: NATS bench with SLO gates
        run: |
          ./benchnats \
            --subject ampy.prod.bars.v1.XNAS.AAPL \
            --nats nats://127.0.0.1:4222 \
            --count 1000 --concurrency 4 --payload-bytes 256 --gzip \
            --timeout 35s \
            --slo-p95-ms 150 --slo-p99-ms 300 --min-throughput 200

      # ---------- Redpanda/Kafka DLQ smoke (true concurrent) + SLO bench ----------
      - name: Start Redpanda
        shell: bash
        run: |
          docker run -d --name redpanda -p 9092:9092 -p 9644:9644 redpandadata/redpanda:latest \
            redpanda start --overprovisioned --smp 1 --memory 1G --reserve-memory 0M \
            --node-id 0 --check=false \
            --kafka-addr "PLAINTEXT://0.0.0.0:9092" \
            --advertise-kafka-addr "PLAINTEXT://127.0.0.1:9092"
          
      - name: Wait for Redpanda
        run: |
          python3 -c "
          import socket
          import time
          import sys
          print('Waiting for Redpanda to be ready...')
          for i in range(60):
              try:
                  sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                  sock.settimeout(1)
                  result = sock.connect_ex(('127.0.0.1', 9092))
                  sock.close()
                  if result == 0:
                      print('Redpanda port is open, waiting for full readiness...')
                      time.sleep(5)
                      print('Redpanda is ready')
                      sys.exit(0)
              except Exception as e:
                  print(f'Connection attempt {i+1} failed: {e}')
              time.sleep(1)
          print('Redpanda failed to start within 60 seconds')
          sys.exit(1)
          "

      - name: Ensure Kafka topic
        run: |
          ./kafkabusctl ensure-topic \
            --brokers 127.0.0.1:9092 \
            --topic ampy.prod.bars.v1.XNAS.AAPL \
            --partitions 3

      - name: Kafka DLQ smoke (consumer + poison in one step)
        shell: bash
        run: |
          set -euo pipefail
          # start consumer in background (will DLQ on decode error)
          ./kafkabusctl sub \
            --brokers 127.0.0.1:9092 \
            --topic ampy.prod.bars.v1.XNAS.AAPL \
            --group ci-consumer > kafka_consumer.log 2>&1 &
          cons_pid=$!
          sleep 2
          # publish poison (bad gzip)
          ./kafkapoison \
            --brokers 127.0.0.1:9092 \
            --topic ampy.prod.bars.v1.XNAS.AAPL \
            --producer poison@ci --source poison-test --pk XNAS.AAPL
          # wait a moment for DLQ write
          sleep 3
          # stop consumer
          kill $cons_pid || true
          wait $cons_pid || true

      - name: Inspect DLQ topic (should contain the poison)
        run: |
          ./kafkainspect \
            --brokers 127.0.0.1:9092 \
            --topic ampy.prod.dlq.v1.ampy.prod.bars.v1.XNAS.AAPL \
            --group dlq-inspector \
            --max 5

      - name: Kafka bench with SLO gates
        run: |
          ./benchkafka \
            --brokers 127.0.0.1:9092 \
            --topic ampy.prod.bars.v1.XNAS.AAPL \
            --partitions 3 \
            --count 1000 --concurrency 4 --payload-bytes 256 --gzip \
            --timeout 40s \
            --slo-p95-ms 150 --slo-p99-ms 300 --min-throughput 120

      - name: Upload logs (if any)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-logs
          path: |
            kafka_consumer.log

